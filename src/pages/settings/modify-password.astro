---
import Button from '../../components/Button.astro';
import TextField from '../../components/TextField.astro';
import Layout from '../../layouts/Layout.astro';
import Account, { TokenInconnuError } from '../../model/users/Account';
import { getAccountBySession } from '../../model/Utilitaire';

//Get Account
const account: Account = await getAccountBySession(Astro.request.headers).catch(
	(err) => null
);

if (Astro.request.method == 'POST') {
	const formData = await Astro.request.formData();
	// Vérification des champs
	const token = Astro.url.searchParams.get('token');
	if (!formData.has('password') || !formData.has('password_confirm')) {
		return Astro.redirect('?error=missing_field&token=' + token);
	}
	// Vérification des mots de passe
	if (formData.get('password') != formData.get('password_confirm')) {
		return Astro.redirect('?error=wrong_password&token=' + token);
	}
	if (!token) {
		Astro.props.error = 'missing_token';
		return Astro.redirect('?error=missing_token');
	}
	if (token.length == 0) {
		Astro.props.error = 'invalid_token';
		return Astro.redirect('?error=invalid_token');
	}
	const password = formData.get('password').toString();
	// Mot de passe fort https://www.section.io/engineering-education/password-strength-checker-javascript/
	if (
		!/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{12,})/.test(
			password
		)
	) {
		return Astro.redirect('?error=weak_password&token=' + token);
	}
	// Vérification et modification du mot de passe
	try {
		if (account) {
			await account.setPassword(password);
		} else {
			await Account.setPassword(token, password);
		}
	} catch (e) {
		if (e instanceof TokenInconnuError) {
			return Astro.redirect('?error=invalid_token');
		} else {
			console.error(e);
			return new Response('Internal server error', { status: 500 }); // FIXME : page d'erreur	}
		}
		// Vérification de la validité du token
		//
		//
		// Redirection
	}
	Astro.props.success = 'modified_password';
	return Astro.redirect('?success=modified_password');
}
let error_msg = '';
let success_msg = '';
if (Astro.url.searchParams.has('error')) {
	switch (Astro.url.searchParams.get('error')) {
		case 'missing_field':
			error_msg = 'Veuillez remplir tous les champs';
			break;
		case 'wrong_password':
			error_msg = 'Les mots de passe ne correspondent pas';
			break;
		case 'missing_token':
			error_msg = 'Le token est manquant';
			break;
		case 'invalid_token':
			error_msg = 'Le token est invalide';
			break;
		case 'weak_password':
			error_msg = 'Le mot de passe est trop faible';
			break;
	}
}
if (Astro.url.searchParams.has('success')) {
	switch (Astro.url.searchParams.get('success')) {
		case 'modified_password':
			success_msg = 'Votre mot de passe a été modifié';
			break;
	}
}
let message_password =
	'Le mot de passe doit contenir au moins 12 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial';
if (
	Astro.url.searchParams.has('error') ||
	Astro.url.searchParams.has('success')
) {
	message_password = '';
}
---

<Layout title="Réinitialiser votre mot de passe" no_searchbar>
	<main>
		<h1>Réinitialiser votre mot de passe</h1>
		{error_msg && <p class="error_msg">{error_msg}</p>}
		{success_msg && <p class="success_msg">{success_msg}</p>}
		<form method="post" class="formlist">
			<table>
				<th>Mot de passe :</th>
				<td>
					<TextField
						text=""
						placeholder="Entrez votre nouveau mot de passe"
						type="password"
						length="15rem"
						name="password"
					/>
				</td>
				<tr>
					<th>Confirmer le mot de passe :</th>
					<td>
						<TextField
							text=""
							placeholder="Confirmer le nouveau mot de passe"
							type="password"
							length="15rem"
							name="password_confirm"
						/>
					</td>
				</tr>
			</table>
			<div id="btn">
				<Button text="Modifier le mot de passe" />
			</div>
		</form>
		<p class="message_password">{message_password}</p>
	</main>
</Layout>

<style>
	.error_msg {
		color: red;
		text-align: center;
	}
	.success_msg {
		color: green;
		text-align: center;
	}
	.message_password {
		text-align: center;
		color: whitesmoke;
	}
	#btn {
		/* centre le bouton */
		text-align: center;
	}
	main {
		background-color: var(--theme-secondary);
		margin: 3rem 5rem;
		padding: 2rem;

		border-radius: 2rem;

		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}
	h1 {
		margin-top: 0rem;
	}
</style>
